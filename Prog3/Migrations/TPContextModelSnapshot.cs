// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prog3.Models;

namespace Prog3.Migrations
{
    [DbContext(typeof(TPContext))]
    partial class TPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Prog3.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCliente")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPersona")
                        .HasColumnType("int")
                        .HasColumnName("idPersona");

                    b.HasKey("IdCliente");

                    b.HasIndex("IdPersona");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Prog3.Models.Compra", b =>
                {
                    b.Property<int>("IdCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idCompra")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int")
                        .HasColumnName("idProveedor");

                    b.Property<double?>("TotalCompra")
                        .HasColumnType("float");

                    b.HasKey("IdCompra");

                    b.HasIndex("IdProveedor");

                    b.ToTable("Compra");
                });

            modelBuilder.Entity("Prog3.Models.DetalleCompra", b =>
                {
                    b.Property<int>("IdDetalleCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDetalleCompra")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdCompra")
                        .HasColumnType("int")
                        .HasColumnName("idCompra");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int")
                        .HasColumnName("idProducto");

                    b.Property<double?>("Precio")
                        .HasColumnType("float");

                    b.HasKey("IdDetalleCompra");

                    b.HasIndex("IdCompra");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetalleCompra");
                });

            modelBuilder.Entity("Prog3.Models.DetalleVenta", b =>
                {
                    b.Property<int>("IdDetalleVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDetalleVenta")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<double?>("Descuento")
                        .HasColumnType("float")
                        .HasColumnName("descuento");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int")
                        .HasColumnName("idProducto");

                    b.Property<int>("IdVenta")
                        .HasColumnType("int")
                        .HasColumnName("idVenta");

                    b.Property<double?>("Precio")
                        .HasColumnType("float");

                    b.Property<double?>("Recargo")
                        .HasColumnType("float")
                        .HasColumnName("recargo");

                    b.HasKey("IdDetalleVenta");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdVenta");

                    b.ToTable("DetalleVenta");
                });

            modelBuilder.Entity("Prog3.Models.Direccion", b =>
                {
                    b.Property<int>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idDireccion")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Calle")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdPersona")
                        .HasColumnType("int")
                        .HasColumnName("idPersona");

                    b.Property<string>("NumeroCalle")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Provincia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdPersona");

                    b.ToTable("Direccion");
                });

            modelBuilder.Entity("Prog3.Models.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPersona")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength(true);

                    b.HasKey("IdPersona");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("Prog3.Models.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idProducto")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoProducto")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdTipoProducto")
                        .HasColumnType("int")
                        .HasColumnName("idTipoProducto");

                    b.Property<string>("Imagen")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NombreProducto")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("Precio")
                        .HasColumnType("float");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdProducto");

                    b.HasIndex("IdTipoProducto");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("Prog3.Models.Proveedor", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idProveedor")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPersona")
                        .HasColumnType("int")
                        .HasColumnName("idPersona");

                    b.Property<string>("Rubro")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdProveedor");

                    b.HasIndex("IdPersona");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("Prog3.Models.TipoProducto", b =>
                {
                    b.Property<int>("IdTipoProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idTipoProducto")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NombreTipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdTipoProducto");

                    b.ToTable("TipoProducto");
                });

            modelBuilder.Entity("Prog3.Models.Venta", b =>
                {
                    b.Property<int>("IdVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idVenta")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdCliente")
                        .HasColumnType("int")
                        .HasColumnName("idCliente");

                    b.Property<string>("Sucursal")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double?>("TotalVenta")
                        .HasColumnType("float");

                    b.HasKey("IdVenta")
                        .HasName("PK_Table_1");

                    b.HasIndex("IdCliente");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("Prog3.Models.Cliente", b =>
                {
                    b.HasOne("Prog3.Models.Persona", "IdPersonaNavigation")
                        .WithMany("Cliente")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("fk_cliente_idpersona")
                        .IsRequired();

                    b.Navigation("IdPersonaNavigation");
                });

            modelBuilder.Entity("Prog3.Models.Compra", b =>
                {
                    b.HasOne("Prog3.Models.Proveedor", "IdProveedorNavigation")
                        .WithMany("Compra")
                        .HasForeignKey("IdProveedor")
                        .HasConstraintName("fk_compra_idproveedor")
                        .IsRequired();

                    b.Navigation("IdProveedorNavigation");
                });

            modelBuilder.Entity("Prog3.Models.DetalleCompra", b =>
                {
                    b.HasOne("Prog3.Models.Compra", "IdCompraNavigation")
                        .WithMany("DetalleCompra")
                        .HasForeignKey("IdCompra")
                        .HasConstraintName("fk_detallecompra_idcompra")
                        .IsRequired();

                    b.HasOne("Prog3.Models.Producto", "IdProductoNavigation")
                        .WithMany("DetalleCompra")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("fk_detallecompra_idproducto")
                        .IsRequired();

                    b.Navigation("IdCompraNavigation");

                    b.Navigation("IdProductoNavigation");
                });

            modelBuilder.Entity("Prog3.Models.DetalleVenta", b =>
                {
                    b.HasOne("Prog3.Models.Producto", "IdProductoNavigation")
                        .WithMany("DetalleVenta")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("fk_detalleventa_idproducto")
                        .IsRequired();

                    b.HasOne("Prog3.Models.Venta", "IdVentaNavigation")
                        .WithMany("DetalleVenta")
                        .HasForeignKey("IdVenta")
                        .HasConstraintName("fk_detalleventa_idventa")
                        .IsRequired();

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdVentaNavigation");
                });

            modelBuilder.Entity("Prog3.Models.Direccion", b =>
                {
                    b.HasOne("Prog3.Models.Persona", "IdPersonaNavigation")
                        .WithMany("Direccion")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("fk_direccion_idpersona")
                        .IsRequired();

                    b.Navigation("IdPersonaNavigation");
                });

            modelBuilder.Entity("Prog3.Models.Producto", b =>
                {
                    b.HasOne("Prog3.Models.TipoProducto", "IdTipoProductoNavigation")
                        .WithMany("Producto")
                        .HasForeignKey("IdTipoProducto")
                        .HasConstraintName("fk_producto_idtipoproducto");

                    b.Navigation("IdTipoProductoNavigation");
                });

            modelBuilder.Entity("Prog3.Models.Proveedor", b =>
                {
                    b.HasOne("Prog3.Models.Persona", "IdPersonaNavigation")
                        .WithMany("Proveedor")
                        .HasForeignKey("IdPersona")
                        .HasConstraintName("fk_proveedor_idpersona")
                        .IsRequired();

                    b.Navigation("IdPersonaNavigation");
                });

            modelBuilder.Entity("Prog3.Models.Venta", b =>
                {
                    b.HasOne("Prog3.Models.Cliente", "IdClienteNavigation")
                        .WithMany("Venta")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("fk_venta_idcliente")
                        .IsRequired();

                    b.Navigation("IdClienteNavigation");
                });

            modelBuilder.Entity("Prog3.Models.Cliente", b =>
                {
                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Prog3.Models.Compra", b =>
                {
                    b.Navigation("DetalleCompra");
                });

            modelBuilder.Entity("Prog3.Models.Persona", b =>
                {
                    b.Navigation("Cliente");

                    b.Navigation("Direccion");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Prog3.Models.Producto", b =>
                {
                    b.Navigation("DetalleCompra");

                    b.Navigation("DetalleVenta");
                });

            modelBuilder.Entity("Prog3.Models.Proveedor", b =>
                {
                    b.Navigation("Compra");
                });

            modelBuilder.Entity("Prog3.Models.TipoProducto", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Prog3.Models.Venta", b =>
                {
                    b.Navigation("DetalleVenta");
                });
#pragma warning restore 612, 618
        }
    }
}
